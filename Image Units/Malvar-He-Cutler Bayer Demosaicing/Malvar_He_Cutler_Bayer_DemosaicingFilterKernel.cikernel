kernel vec4 _deBayer(sampler image, vec2 firstRedPixel)
{

    vec4 center;
    center.xy = samplerCoord(image).xy;
    center.zw = samplerCoord(image).xy + firstRedPixel;

    vec4 xCoord = center.x + vec4(-2.0, -1.0, 1.0, 2.0);
    vec4 yCoord = center.y + vec4(-2.0, -1.0, 1.0, 2.0);

    float C = unpremultiply(sample(image, center.xy)).r;

    const vec4 kC = vec4( 4.0,  6.0,  5.0,  5.0) / 8.0;

    // Determine which of four types of pixels we are on.
    vec2 alternate = mod(floor(center.zw), 2.0);

    vec4 Dvec = vec4(
        unpremultiply( sample(image,vec2(xCoord[1], yCoord[1]))).r, // (-1,-1)
        unpremultiply( sample(image,vec2(xCoord[1], yCoord[2]))).r, // (-1, 1)
        unpremultiply( sample(image,vec2(xCoord[2], yCoord[1]))).r, // ( 1,-1)
        unpremultiply( sample(image,vec2(xCoord[2], yCoord[2]))).r  // ( 1, 1)
	);
    
    vec4 PATTERN = (kC.xyz * C).xyzz;

    // Can also be a dot product with (1,1,1,1) on hardware where that is
    // specially optimized.
    // Equivalent to: D = Dvec[0] + Dvec[1] + Dvec[2] + Dvec[3];
    Dvec.xy += Dvec.zw;
    Dvec.x  += Dvec.y;
        
    vec4 value = vec4(  
        unpremultiply( sample(image,vec2(center.x, yCoord[0]))).r, // ( 0,-2)
        unpremultiply( sample(image,vec2(center.x, yCoord[1]))).r, // ( 0,-1)
        unpremultiply( sample(image,vec2(xCoord[0], center.y))).r, // (-1, 0)
        unpremultiply( sample(image,vec2(xCoord[1], center.y))).r  // (-2, 0)
    );
             
    vec4 temp = vec4(
        unpremultiply( sample(image,vec2(center.x, yCoord[3]))).r, // ( 0, 2)
        unpremultiply( sample(image,vec2(center.x, yCoord[2]))).r, // ( 0, 1)
        unpremultiply( sample(image,vec2(xCoord[3], center.y))).r, // ( 2, 0)
        unpremultiply( sample(image,vec2(xCoord[2], center.y))).r  // ( 1, 0)
    );
    
    // Even the simplest compilers should be able to constant-fold these to avoid the division.
    // Note that on scalar processors these constants force computation of some identical products twice.
    const vec4 kA = vec4(-1.0, -1.5,  0.5, -1.0) / 8.0;
    const vec4 kB = vec4( 2.0,  0.0,  0.0,  4.0) / 8.0;
    const vec4 kD = vec4( 0.0,  2.0, -1.0, -1.0) / 8.0;        
            
    const vec4 kE = vec4(kA.xywz); 
    const vec4 kF = vec4(kB.xywz); 
    
    value += temp;
    
    // There are five filter patterns (identity, cross, checker,
    // theta, phi).  Precompute the terms from all of them and then
    // use swizzles to assign to color channels. 
    //
    // Channel   Matches
    //   x       cross   (e.g., EE G)
    //   y       checker (e.g., EE B)
    //   z       theta   (e.g., EO R)
    //   w       phi     (e.g., EO R)
    
	float A = (value[0]);
	float B = (value[1]);
	float D = (Dvec.x);
	float E  = (value[2]); 
	float F = (value[3]);
	    
    // Avoid zero elements. On a scalar processor this saves two MADDs and it has no
    // effect on a vector processor.
    PATTERN.yzw += (kD.yz * D).xyy;

    PATTERN += (kA.xyz * A).xyzx + (kE.xyw * E).xyxz;
    PATTERN.xw  += kB.xw * B;
    PATTERN.xz  += kF.xz * F;
    
    vec4 returnColor;
    
    returnColor.rgb = (alternate.y == 0.0) ?
        ((alternate.x == 0.0) ?
            vec3(C, PATTERN.xy) :
            vec3(PATTERN.z, C, PATTERN.w)) :
        ((alternate.x == 0.0) ?
            vec3(PATTERN.w, C, PATTERN.z) :
            vec3(PATTERN.yx, C));
        
        returnColor.w = 1.0;
                
        return premultiply(returnColor);

}